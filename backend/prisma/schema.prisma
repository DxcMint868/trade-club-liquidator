// Prisma schema for TradeClub
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Match {
  id              String      @id @default(cuid())
  matchId         String      @unique
  creator         String
  entryMargin     String
  duration        Int
  maxParticipants Int        // Max MONACHADS (competitors)
  maxSupporters   Int?       // Optional: limit supporters per match
  prizePool       String
  status          MatchStatus @default(CREATED)
  startTime       DateTime?
  endTime         DateTime?
  winner          String?    // Winning Monachad address
  blockNumber     Int
  transactionHash String
  createdTxHash   String?
  startedTxHash   String?
  completedTxHash String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  participants Participant[]
  delegations  Delegation[]
  trades       Trade[]

  @@index([matchId])
  @@index([creator])
  @@index([status])
}

model Participant {
  id              String          @id @default(cuid())
  matchId         String
  address         String
  role            ParticipantRole @default(SUPPORTER) // MONACHAD or SUPPORTER
  followingAddress String?        // If SUPPORTER: which Monachad they're following
  stakedAmount    String
  pnl             String          @default("0")
  joinedTxHash    String?
  joinedAt        DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  match  Match   @relation(fields: [matchId], references: [matchId])
  trades Trade[]

  @@unique([matchId, address])
  @@index([matchId])
  @@index([address])
  @@index([role])
  @@index([followingAddress])
}

model Delegation {
  id               String    @id @default(cuid())
  delegationHash   String    @unique
  supporter        String
  monachad         String
  matchId          String
  amount           String
  spendingLimit    String
  spent            String    @default("0")
  expiresAt        DateTime
  createdTxHash    String?
  isActive         Boolean   @default(true)
  isRevoked        Boolean   @default(false)
  revokedTxHash    String?
  revokedAt        DateTime?
  spentAmount      String    @default("0") // Bigint as string
  signedDelegation String? // JSON string of SignedDelegation from delegator
  blockNumber      Int
  transactionHash  String
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  match            Match     @relation(fields: [matchId], references: [matchId])
  trades           Trade[]

  @@index([delegationHash])
  @@index([supporter])
  @@index([monachad])
  @@index([matchId])
}

model Trade {
  id              String    @id @default(cuid())
  matchId         String
  participantId   String
  delegationId    String?
  tradeType       TradeType
  tokenIn         String
  tokenOut        String
  amountIn        String
  amountOut       String
  targetContract  String
  blockNumber     Int
  transactionHash String
  timestamp       DateTime  @default(now())

  match       Match       @relation(fields: [matchId], references: [matchId])
  participant Participant @relation(fields: [participantId], references: [id])
  delegation  Delegation? @relation(fields: [delegationId], references: [id])

  @@index([matchId])
  @@index([participantId])
  @@index([delegationId])
  @@index([transactionHash])
}

model Governance {
  id           String           @id @default(cuid())
  proposalId   String           @unique
  title        String
  description  String
  creator      String
  status       GovernanceStatus @default(ACTIVE)
  votesFor     String           @default("0")
  votesAgainst String           @default("0")
  startTime    DateTime
  endTime      DateTime
  executed     Boolean          @default(false)
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt

  bribes Bribe[]

  @@index([proposalId])
  @@index([status])
}

model Bribe {
  id            String   @id @default(cuid())
  bribeId       String   @unique
  proposalId    String
  creator       String
  totalReward   String
  rewardPerVote String   @default("0")
  votesCaptured String   @default("0")
  deadline      DateTime
  distributed   Boolean  @default(false)
  active        Boolean  @default(true)
  createdTxHash String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  governance Governance @relation(fields: [proposalId], references: [proposalId])
  votes      Vote[]

  @@index([bribeId])
  @@index([proposalId])
}

model Vote {
  id         String   @id @default(cuid())
  bribeId    String
  voter      String
  delegatee  String
  voteWeight String
  txHash     String
  timestamp  DateTime @default(now())

  bribe Bribe @relation(fields: [bribeId], references: [bribeId])

  @@unique([bribeId, voter])
  @@index([bribeId])
  @@index([voter])
  @@index([delegatee])
}

enum MatchStatus {
  CREATED
  ACTIVE
  COMPLETED
  SETTLED
}

enum ParticipantRole {
  MONACHAD   // Competing trader
  SUPPORTER  // Copy trader following a Monachad
}

enum TradeType {
  MONACHAD_TRADE
  SUPPORTER_COPY
}

enum GovernanceStatus {
  ACTIVE
  PASSED
  REJECTED
  EXECUTED
}
